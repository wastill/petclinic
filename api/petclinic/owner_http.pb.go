// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.24.3
// source: petclinic/owner.proto

package petclinic

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationOwnerServiceCreateOwner = "/api.petclinic.OwnerService/CreateOwner"
const OperationOwnerServiceDeleteOwner = "/api.petclinic.OwnerService/DeleteOwner"
const OperationOwnerServiceGetOwner = "/api.petclinic.OwnerService/GetOwner"
const OperationOwnerServiceListOwner = "/api.petclinic.OwnerService/ListOwner"
const OperationOwnerServiceUpdateOwner = "/api.petclinic.OwnerService/UpdateOwner"

type OwnerServiceHTTPServer interface {
	CreateOwner(context.Context, *CreateOwnerRequest) (*CreateOwnerReply, error)
	DeleteOwner(context.Context, *DeleteOwnerRequest) (*DeleteOwnerReply, error)
	GetOwner(context.Context, *GetOwnerRequest) (*GetOwnerReply, error)
	ListOwner(context.Context, *ListOwnerRequest) (*ListOwnerReply, error)
	UpdateOwner(context.Context, *UpdateOwnerRequest) (*UpdateOwnerReply, error)
}

func RegisterOwnerServiceHTTPServer(s *http.Server, srv OwnerServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/petclinic/owner", _OwnerService_CreateOwner0_HTTP_Handler(srv))
	r.PUT("/petclinic/owner/{id}", _OwnerService_UpdateOwner0_HTTP_Handler(srv))
	r.DELETE("/petclinic/owner/{id}", _OwnerService_DeleteOwner0_HTTP_Handler(srv))
	r.GET("/petclinic/owner/{id}", _OwnerService_GetOwner0_HTTP_Handler(srv))
	r.GET("/petclinic/owners", _OwnerService_ListOwner0_HTTP_Handler(srv))
}

func _OwnerService_CreateOwner0_HTTP_Handler(srv OwnerServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateOwnerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOwnerServiceCreateOwner)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateOwner(ctx, req.(*CreateOwnerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateOwnerReply)
		return ctx.Result(200, reply)
	}
}

func _OwnerService_UpdateOwner0_HTTP_Handler(srv OwnerServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateOwnerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOwnerServiceUpdateOwner)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateOwner(ctx, req.(*UpdateOwnerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateOwnerReply)
		return ctx.Result(200, reply)
	}
}

func _OwnerService_DeleteOwner0_HTTP_Handler(srv OwnerServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteOwnerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOwnerServiceDeleteOwner)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteOwner(ctx, req.(*DeleteOwnerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteOwnerReply)
		return ctx.Result(200, reply)
	}
}

func _OwnerService_GetOwner0_HTTP_Handler(srv OwnerServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetOwnerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOwnerServiceGetOwner)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetOwner(ctx, req.(*GetOwnerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetOwnerReply)
		return ctx.Result(200, reply)
	}
}

func _OwnerService_ListOwner0_HTTP_Handler(srv OwnerServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListOwnerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOwnerServiceListOwner)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListOwner(ctx, req.(*ListOwnerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListOwnerReply)
		return ctx.Result(200, reply)
	}
}

type OwnerServiceHTTPClient interface {
	CreateOwner(ctx context.Context, req *CreateOwnerRequest, opts ...http.CallOption) (rsp *CreateOwnerReply, err error)
	DeleteOwner(ctx context.Context, req *DeleteOwnerRequest, opts ...http.CallOption) (rsp *DeleteOwnerReply, err error)
	GetOwner(ctx context.Context, req *GetOwnerRequest, opts ...http.CallOption) (rsp *GetOwnerReply, err error)
	ListOwner(ctx context.Context, req *ListOwnerRequest, opts ...http.CallOption) (rsp *ListOwnerReply, err error)
	UpdateOwner(ctx context.Context, req *UpdateOwnerRequest, opts ...http.CallOption) (rsp *UpdateOwnerReply, err error)
}

type OwnerServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewOwnerServiceHTTPClient(client *http.Client) OwnerServiceHTTPClient {
	return &OwnerServiceHTTPClientImpl{client}
}

func (c *OwnerServiceHTTPClientImpl) CreateOwner(ctx context.Context, in *CreateOwnerRequest, opts ...http.CallOption) (*CreateOwnerReply, error) {
	var out CreateOwnerReply
	pattern := "/petclinic/owner"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOwnerServiceCreateOwner))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OwnerServiceHTTPClientImpl) DeleteOwner(ctx context.Context, in *DeleteOwnerRequest, opts ...http.CallOption) (*DeleteOwnerReply, error) {
	var out DeleteOwnerReply
	pattern := "/petclinic/owner/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOwnerServiceDeleteOwner))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OwnerServiceHTTPClientImpl) GetOwner(ctx context.Context, in *GetOwnerRequest, opts ...http.CallOption) (*GetOwnerReply, error) {
	var out GetOwnerReply
	pattern := "/petclinic/owner/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOwnerServiceGetOwner))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OwnerServiceHTTPClientImpl) ListOwner(ctx context.Context, in *ListOwnerRequest, opts ...http.CallOption) (*ListOwnerReply, error) {
	var out ListOwnerReply
	pattern := "/petclinic/owners"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOwnerServiceListOwner))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *OwnerServiceHTTPClientImpl) UpdateOwner(ctx context.Context, in *UpdateOwnerRequest, opts ...http.CallOption) (*UpdateOwnerReply, error) {
	var out UpdateOwnerReply
	pattern := "/petclinic/owner/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOwnerServiceUpdateOwner))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
