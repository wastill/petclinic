// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: petclinic/pet_type.proto

package petclinic

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PetType_CreatePetType_FullMethodName = "/api.petclinic.PetType/CreatePetType"
	PetType_UpdatePetType_FullMethodName = "/api.petclinic.PetType/UpdatePetType"
	PetType_DeletePetType_FullMethodName = "/api.petclinic.PetType/DeletePetType"
	PetType_GetPetType_FullMethodName    = "/api.petclinic.PetType/GetPetType"
	PetType_ListPetType_FullMethodName   = "/api.petclinic.PetType/ListPetType"
)

// PetTypeClient is the client API for PetType service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PetTypeClient interface {
	CreatePetType(ctx context.Context, in *CreatePetTypeRequest, opts ...grpc.CallOption) (*CreatePetTypeReply, error)
	UpdatePetType(ctx context.Context, in *UpdatePetTypeRequest, opts ...grpc.CallOption) (*UpdatePetTypeReply, error)
	DeletePetType(ctx context.Context, in *DeletePetTypeRequest, opts ...grpc.CallOption) (*DeletePetTypeReply, error)
	GetPetType(ctx context.Context, in *GetPetTypeRequest, opts ...grpc.CallOption) (*GetPetTypeReply, error)
	ListPetType(ctx context.Context, in *ListPetTypeRequest, opts ...grpc.CallOption) (*ListPetTypeReply, error)
}

type petTypeClient struct {
	cc grpc.ClientConnInterface
}

func NewPetTypeClient(cc grpc.ClientConnInterface) PetTypeClient {
	return &petTypeClient{cc}
}

func (c *petTypeClient) CreatePetType(ctx context.Context, in *CreatePetTypeRequest, opts ...grpc.CallOption) (*CreatePetTypeReply, error) {
	out := new(CreatePetTypeReply)
	err := c.cc.Invoke(ctx, PetType_CreatePetType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petTypeClient) UpdatePetType(ctx context.Context, in *UpdatePetTypeRequest, opts ...grpc.CallOption) (*UpdatePetTypeReply, error) {
	out := new(UpdatePetTypeReply)
	err := c.cc.Invoke(ctx, PetType_UpdatePetType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petTypeClient) DeletePetType(ctx context.Context, in *DeletePetTypeRequest, opts ...grpc.CallOption) (*DeletePetTypeReply, error) {
	out := new(DeletePetTypeReply)
	err := c.cc.Invoke(ctx, PetType_DeletePetType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petTypeClient) GetPetType(ctx context.Context, in *GetPetTypeRequest, opts ...grpc.CallOption) (*GetPetTypeReply, error) {
	out := new(GetPetTypeReply)
	err := c.cc.Invoke(ctx, PetType_GetPetType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petTypeClient) ListPetType(ctx context.Context, in *ListPetTypeRequest, opts ...grpc.CallOption) (*ListPetTypeReply, error) {
	out := new(ListPetTypeReply)
	err := c.cc.Invoke(ctx, PetType_ListPetType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PetTypeServer is the server API for PetType service.
// All implementations must embed UnimplementedPetTypeServer
// for forward compatibility
type PetTypeServer interface {
	CreatePetType(context.Context, *CreatePetTypeRequest) (*CreatePetTypeReply, error)
	UpdatePetType(context.Context, *UpdatePetTypeRequest) (*UpdatePetTypeReply, error)
	DeletePetType(context.Context, *DeletePetTypeRequest) (*DeletePetTypeReply, error)
	GetPetType(context.Context, *GetPetTypeRequest) (*GetPetTypeReply, error)
	ListPetType(context.Context, *ListPetTypeRequest) (*ListPetTypeReply, error)
	mustEmbedUnimplementedPetTypeServer()
}

// UnimplementedPetTypeServer must be embedded to have forward compatible implementations.
type UnimplementedPetTypeServer struct {
}

func (UnimplementedPetTypeServer) CreatePetType(context.Context, *CreatePetTypeRequest) (*CreatePetTypeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePetType not implemented")
}
func (UnimplementedPetTypeServer) UpdatePetType(context.Context, *UpdatePetTypeRequest) (*UpdatePetTypeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePetType not implemented")
}
func (UnimplementedPetTypeServer) DeletePetType(context.Context, *DeletePetTypeRequest) (*DeletePetTypeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePetType not implemented")
}
func (UnimplementedPetTypeServer) GetPetType(context.Context, *GetPetTypeRequest) (*GetPetTypeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPetType not implemented")
}
func (UnimplementedPetTypeServer) ListPetType(context.Context, *ListPetTypeRequest) (*ListPetTypeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPetType not implemented")
}
func (UnimplementedPetTypeServer) mustEmbedUnimplementedPetTypeServer() {}

// UnsafePetTypeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PetTypeServer will
// result in compilation errors.
type UnsafePetTypeServer interface {
	mustEmbedUnimplementedPetTypeServer()
}

func RegisterPetTypeServer(s grpc.ServiceRegistrar, srv PetTypeServer) {
	s.RegisterService(&PetType_ServiceDesc, srv)
}

func _PetType_CreatePetType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePetTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetTypeServer).CreatePetType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetType_CreatePetType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetTypeServer).CreatePetType(ctx, req.(*CreatePetTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetType_UpdatePetType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePetTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetTypeServer).UpdatePetType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetType_UpdatePetType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetTypeServer).UpdatePetType(ctx, req.(*UpdatePetTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetType_DeletePetType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePetTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetTypeServer).DeletePetType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetType_DeletePetType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetTypeServer).DeletePetType(ctx, req.(*DeletePetTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetType_GetPetType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPetTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetTypeServer).GetPetType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetType_GetPetType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetTypeServer).GetPetType(ctx, req.(*GetPetTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetType_ListPetType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPetTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetTypeServer).ListPetType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetType_ListPetType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetTypeServer).ListPetType(ctx, req.(*ListPetTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PetType_ServiceDesc is the grpc.ServiceDesc for PetType service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PetType_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.petclinic.PetType",
	HandlerType: (*PetTypeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePetType",
			Handler:    _PetType_CreatePetType_Handler,
		},
		{
			MethodName: "UpdatePetType",
			Handler:    _PetType_UpdatePetType_Handler,
		},
		{
			MethodName: "DeletePetType",
			Handler:    _PetType_DeletePetType_Handler,
		},
		{
			MethodName: "GetPetType",
			Handler:    _PetType_GetPetType_Handler,
		},
		{
			MethodName: "ListPetType",
			Handler:    _PetType_ListPetType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "petclinic/pet_type.proto",
}
