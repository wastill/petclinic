// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: petclinic/petclinic_rest_server.proto

package petclinic

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PetClinicRestService_CreateOwner_FullMethodName    = "/api.petclinic.PetClinicRestService/CreateOwner"
	PetClinicRestService_UpdateOwner_FullMethodName    = "/api.petclinic.PetClinicRestService/UpdateOwner"
	PetClinicRestService_DeleteOwner_FullMethodName    = "/api.petclinic.PetClinicRestService/DeleteOwner"
	PetClinicRestService_GetOwner_FullMethodName       = "/api.petclinic.PetClinicRestService/GetOwner"
	PetClinicRestService_ListOwner_FullMethodName      = "/api.petclinic.PetClinicRestService/ListOwner"
	PetClinicRestService_CreatePetType_FullMethodName  = "/api.petclinic.PetClinicRestService/CreatePetType"
	PetClinicRestService_UpdatePetType_FullMethodName  = "/api.petclinic.PetClinicRestService/UpdatePetType"
	PetClinicRestService_DeletePetType_FullMethodName  = "/api.petclinic.PetClinicRestService/DeletePetType"
	PetClinicRestService_GetPetType_FullMethodName     = "/api.petclinic.PetClinicRestService/GetPetType"
	PetClinicRestService_ListPetType_FullMethodName    = "/api.petclinic.PetClinicRestService/ListPetType"
	PetClinicRestService_CreateVisit_FullMethodName    = "/api.petclinic.PetClinicRestService/CreateVisit"
	PetClinicRestService_UpdateVisit_FullMethodName    = "/api.petclinic.PetClinicRestService/UpdateVisit"
	PetClinicRestService_DeleteVisit_FullMethodName    = "/api.petclinic.PetClinicRestService/DeleteVisit"
	PetClinicRestService_GetVisit_FullMethodName       = "/api.petclinic.PetClinicRestService/GetVisit"
	PetClinicRestService_ListVisit_FullMethodName      = "/api.petclinic.PetClinicRestService/ListVisit"
	PetClinicRestService_CreatePet_FullMethodName      = "/api.petclinic.PetClinicRestService/CreatePet"
	PetClinicRestService_UpdatePet_FullMethodName      = "/api.petclinic.PetClinicRestService/UpdatePet"
	PetClinicRestService_DeletePet_FullMethodName      = "/api.petclinic.PetClinicRestService/DeletePet"
	PetClinicRestService_GetPet_FullMethodName         = "/api.petclinic.PetClinicRestService/GetPet"
	PetClinicRestService_ListPet_FullMethodName        = "/api.petclinic.PetClinicRestService/ListPet"
	PetClinicRestService_CreateOwnerPet_FullMethodName = "/api.petclinic.PetClinicRestService/CreateOwnerPet"
	PetClinicRestService_DeleteOwnerPet_FullMethodName = "/api.petclinic.PetClinicRestService/DeleteOwnerPet"
	PetClinicRestService_GetOwnerPet_FullMethodName    = "/api.petclinic.PetClinicRestService/GetOwnerPet"
)

// PetClinicRestServiceClient is the client API for PetClinicRestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PetClinicRestServiceClient interface {
	// =========================== owner start =======================================
	CreateOwner(ctx context.Context, in *CreateOwnerRequest, opts ...grpc.CallOption) (*CreateOwnerReply, error)
	UpdateOwner(ctx context.Context, in *UpdateOwnerRequest, opts ...grpc.CallOption) (*UpdateOwnerReply, error)
	DeleteOwner(ctx context.Context, in *DeleteOwnerRequest, opts ...grpc.CallOption) (*DeleteOwnerReply, error)
	GetOwner(ctx context.Context, in *GetOwnerRequest, opts ...grpc.CallOption) (*GetOwnerReply, error)
	ListOwner(ctx context.Context, in *ListOwnerRequest, opts ...grpc.CallOption) (*ListOwnerReply, error)
	// =========================== pet type start =======================================
	CreatePetType(ctx context.Context, in *CreatePetTypeRequest, opts ...grpc.CallOption) (*CreatePetTypeReply, error)
	UpdatePetType(ctx context.Context, in *UpdatePetTypeRequest, opts ...grpc.CallOption) (*UpdatePetTypeReply, error)
	DeletePetType(ctx context.Context, in *DeletePetTypeRequest, opts ...grpc.CallOption) (*DeletePetTypeReply, error)
	GetPetType(ctx context.Context, in *GetPetTypeRequest, opts ...grpc.CallOption) (*GetPetTypeReply, error)
	ListPetType(ctx context.Context, in *ListPetTypeRequest, opts ...grpc.CallOption) (*ListPetTypeReply, error)
	// =========================== visit start =======================================
	CreateVisit(ctx context.Context, in *CreateVisitRequest, opts ...grpc.CallOption) (*CreateVisitReply, error)
	UpdateVisit(ctx context.Context, in *UpdateVisitRequest, opts ...grpc.CallOption) (*UpdateVisitReply, error)
	DeleteVisit(ctx context.Context, in *DeleteVisitRequest, opts ...grpc.CallOption) (*DeleteVisitReply, error)
	GetVisit(ctx context.Context, in *GetVisitRequest, opts ...grpc.CallOption) (*GetVisitReply, error)
	ListVisit(ctx context.Context, in *ListVisitRequest, opts ...grpc.CallOption) (*ListVisitReply, error)
	// =========================== pet start =======================================
	CreatePet(ctx context.Context, in *CreatePetRequest, opts ...grpc.CallOption) (*CreatePetReply, error)
	UpdatePet(ctx context.Context, in *UpdatePetRequest, opts ...grpc.CallOption) (*UpdatePetReply, error)
	DeletePet(ctx context.Context, in *DeletePetRequest, opts ...grpc.CallOption) (*DeletePetReply, error)
	GetPet(ctx context.Context, in *GetPetRequest, opts ...grpc.CallOption) (*GetPetReply, error)
	ListPet(ctx context.Context, in *ListPetRequest, opts ...grpc.CallOption) (*ListPetReply, error)
	CreateOwnerPet(ctx context.Context, in *CreateOwnerPetRequest, opts ...grpc.CallOption) (*CreateOwnerPetReply, error)
	DeleteOwnerPet(ctx context.Context, in *DeleteOwnerPetRequest, opts ...grpc.CallOption) (*DeleteOwnerPetReply, error)
	GetOwnerPet(ctx context.Context, in *GetOwnerPetRequest, opts ...grpc.CallOption) (*GetOwnerPetReply, error)
}

type petClinicRestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPetClinicRestServiceClient(cc grpc.ClientConnInterface) PetClinicRestServiceClient {
	return &petClinicRestServiceClient{cc}
}

func (c *petClinicRestServiceClient) CreateOwner(ctx context.Context, in *CreateOwnerRequest, opts ...grpc.CallOption) (*CreateOwnerReply, error) {
	out := new(CreateOwnerReply)
	err := c.cc.Invoke(ctx, PetClinicRestService_CreateOwner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petClinicRestServiceClient) UpdateOwner(ctx context.Context, in *UpdateOwnerRequest, opts ...grpc.CallOption) (*UpdateOwnerReply, error) {
	out := new(UpdateOwnerReply)
	err := c.cc.Invoke(ctx, PetClinicRestService_UpdateOwner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petClinicRestServiceClient) DeleteOwner(ctx context.Context, in *DeleteOwnerRequest, opts ...grpc.CallOption) (*DeleteOwnerReply, error) {
	out := new(DeleteOwnerReply)
	err := c.cc.Invoke(ctx, PetClinicRestService_DeleteOwner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petClinicRestServiceClient) GetOwner(ctx context.Context, in *GetOwnerRequest, opts ...grpc.CallOption) (*GetOwnerReply, error) {
	out := new(GetOwnerReply)
	err := c.cc.Invoke(ctx, PetClinicRestService_GetOwner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petClinicRestServiceClient) ListOwner(ctx context.Context, in *ListOwnerRequest, opts ...grpc.CallOption) (*ListOwnerReply, error) {
	out := new(ListOwnerReply)
	err := c.cc.Invoke(ctx, PetClinicRestService_ListOwner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petClinicRestServiceClient) CreatePetType(ctx context.Context, in *CreatePetTypeRequest, opts ...grpc.CallOption) (*CreatePetTypeReply, error) {
	out := new(CreatePetTypeReply)
	err := c.cc.Invoke(ctx, PetClinicRestService_CreatePetType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petClinicRestServiceClient) UpdatePetType(ctx context.Context, in *UpdatePetTypeRequest, opts ...grpc.CallOption) (*UpdatePetTypeReply, error) {
	out := new(UpdatePetTypeReply)
	err := c.cc.Invoke(ctx, PetClinicRestService_UpdatePetType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petClinicRestServiceClient) DeletePetType(ctx context.Context, in *DeletePetTypeRequest, opts ...grpc.CallOption) (*DeletePetTypeReply, error) {
	out := new(DeletePetTypeReply)
	err := c.cc.Invoke(ctx, PetClinicRestService_DeletePetType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petClinicRestServiceClient) GetPetType(ctx context.Context, in *GetPetTypeRequest, opts ...grpc.CallOption) (*GetPetTypeReply, error) {
	out := new(GetPetTypeReply)
	err := c.cc.Invoke(ctx, PetClinicRestService_GetPetType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petClinicRestServiceClient) ListPetType(ctx context.Context, in *ListPetTypeRequest, opts ...grpc.CallOption) (*ListPetTypeReply, error) {
	out := new(ListPetTypeReply)
	err := c.cc.Invoke(ctx, PetClinicRestService_ListPetType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petClinicRestServiceClient) CreateVisit(ctx context.Context, in *CreateVisitRequest, opts ...grpc.CallOption) (*CreateVisitReply, error) {
	out := new(CreateVisitReply)
	err := c.cc.Invoke(ctx, PetClinicRestService_CreateVisit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petClinicRestServiceClient) UpdateVisit(ctx context.Context, in *UpdateVisitRequest, opts ...grpc.CallOption) (*UpdateVisitReply, error) {
	out := new(UpdateVisitReply)
	err := c.cc.Invoke(ctx, PetClinicRestService_UpdateVisit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petClinicRestServiceClient) DeleteVisit(ctx context.Context, in *DeleteVisitRequest, opts ...grpc.CallOption) (*DeleteVisitReply, error) {
	out := new(DeleteVisitReply)
	err := c.cc.Invoke(ctx, PetClinicRestService_DeleteVisit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petClinicRestServiceClient) GetVisit(ctx context.Context, in *GetVisitRequest, opts ...grpc.CallOption) (*GetVisitReply, error) {
	out := new(GetVisitReply)
	err := c.cc.Invoke(ctx, PetClinicRestService_GetVisit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petClinicRestServiceClient) ListVisit(ctx context.Context, in *ListVisitRequest, opts ...grpc.CallOption) (*ListVisitReply, error) {
	out := new(ListVisitReply)
	err := c.cc.Invoke(ctx, PetClinicRestService_ListVisit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petClinicRestServiceClient) CreatePet(ctx context.Context, in *CreatePetRequest, opts ...grpc.CallOption) (*CreatePetReply, error) {
	out := new(CreatePetReply)
	err := c.cc.Invoke(ctx, PetClinicRestService_CreatePet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petClinicRestServiceClient) UpdatePet(ctx context.Context, in *UpdatePetRequest, opts ...grpc.CallOption) (*UpdatePetReply, error) {
	out := new(UpdatePetReply)
	err := c.cc.Invoke(ctx, PetClinicRestService_UpdatePet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petClinicRestServiceClient) DeletePet(ctx context.Context, in *DeletePetRequest, opts ...grpc.CallOption) (*DeletePetReply, error) {
	out := new(DeletePetReply)
	err := c.cc.Invoke(ctx, PetClinicRestService_DeletePet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petClinicRestServiceClient) GetPet(ctx context.Context, in *GetPetRequest, opts ...grpc.CallOption) (*GetPetReply, error) {
	out := new(GetPetReply)
	err := c.cc.Invoke(ctx, PetClinicRestService_GetPet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petClinicRestServiceClient) ListPet(ctx context.Context, in *ListPetRequest, opts ...grpc.CallOption) (*ListPetReply, error) {
	out := new(ListPetReply)
	err := c.cc.Invoke(ctx, PetClinicRestService_ListPet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petClinicRestServiceClient) CreateOwnerPet(ctx context.Context, in *CreateOwnerPetRequest, opts ...grpc.CallOption) (*CreateOwnerPetReply, error) {
	out := new(CreateOwnerPetReply)
	err := c.cc.Invoke(ctx, PetClinicRestService_CreateOwnerPet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petClinicRestServiceClient) DeleteOwnerPet(ctx context.Context, in *DeleteOwnerPetRequest, opts ...grpc.CallOption) (*DeleteOwnerPetReply, error) {
	out := new(DeleteOwnerPetReply)
	err := c.cc.Invoke(ctx, PetClinicRestService_DeleteOwnerPet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petClinicRestServiceClient) GetOwnerPet(ctx context.Context, in *GetOwnerPetRequest, opts ...grpc.CallOption) (*GetOwnerPetReply, error) {
	out := new(GetOwnerPetReply)
	err := c.cc.Invoke(ctx, PetClinicRestService_GetOwnerPet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PetClinicRestServiceServer is the server API for PetClinicRestService service.
// All implementations must embed UnimplementedPetClinicRestServiceServer
// for forward compatibility
type PetClinicRestServiceServer interface {
	// =========================== owner start =======================================
	CreateOwner(context.Context, *CreateOwnerRequest) (*CreateOwnerReply, error)
	UpdateOwner(context.Context, *UpdateOwnerRequest) (*UpdateOwnerReply, error)
	DeleteOwner(context.Context, *DeleteOwnerRequest) (*DeleteOwnerReply, error)
	GetOwner(context.Context, *GetOwnerRequest) (*GetOwnerReply, error)
	ListOwner(context.Context, *ListOwnerRequest) (*ListOwnerReply, error)
	// =========================== pet type start =======================================
	CreatePetType(context.Context, *CreatePetTypeRequest) (*CreatePetTypeReply, error)
	UpdatePetType(context.Context, *UpdatePetTypeRequest) (*UpdatePetTypeReply, error)
	DeletePetType(context.Context, *DeletePetTypeRequest) (*DeletePetTypeReply, error)
	GetPetType(context.Context, *GetPetTypeRequest) (*GetPetTypeReply, error)
	ListPetType(context.Context, *ListPetTypeRequest) (*ListPetTypeReply, error)
	// =========================== visit start =======================================
	CreateVisit(context.Context, *CreateVisitRequest) (*CreateVisitReply, error)
	UpdateVisit(context.Context, *UpdateVisitRequest) (*UpdateVisitReply, error)
	DeleteVisit(context.Context, *DeleteVisitRequest) (*DeleteVisitReply, error)
	GetVisit(context.Context, *GetVisitRequest) (*GetVisitReply, error)
	ListVisit(context.Context, *ListVisitRequest) (*ListVisitReply, error)
	// =========================== pet start =======================================
	CreatePet(context.Context, *CreatePetRequest) (*CreatePetReply, error)
	UpdatePet(context.Context, *UpdatePetRequest) (*UpdatePetReply, error)
	DeletePet(context.Context, *DeletePetRequest) (*DeletePetReply, error)
	GetPet(context.Context, *GetPetRequest) (*GetPetReply, error)
	ListPet(context.Context, *ListPetRequest) (*ListPetReply, error)
	CreateOwnerPet(context.Context, *CreateOwnerPetRequest) (*CreateOwnerPetReply, error)
	DeleteOwnerPet(context.Context, *DeleteOwnerPetRequest) (*DeleteOwnerPetReply, error)
	GetOwnerPet(context.Context, *GetOwnerPetRequest) (*GetOwnerPetReply, error)
	mustEmbedUnimplementedPetClinicRestServiceServer()
}

// UnimplementedPetClinicRestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPetClinicRestServiceServer struct {
}

func (UnimplementedPetClinicRestServiceServer) CreateOwner(context.Context, *CreateOwnerRequest) (*CreateOwnerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOwner not implemented")
}
func (UnimplementedPetClinicRestServiceServer) UpdateOwner(context.Context, *UpdateOwnerRequest) (*UpdateOwnerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOwner not implemented")
}
func (UnimplementedPetClinicRestServiceServer) DeleteOwner(context.Context, *DeleteOwnerRequest) (*DeleteOwnerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOwner not implemented")
}
func (UnimplementedPetClinicRestServiceServer) GetOwner(context.Context, *GetOwnerRequest) (*GetOwnerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOwner not implemented")
}
func (UnimplementedPetClinicRestServiceServer) ListOwner(context.Context, *ListOwnerRequest) (*ListOwnerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOwner not implemented")
}
func (UnimplementedPetClinicRestServiceServer) CreatePetType(context.Context, *CreatePetTypeRequest) (*CreatePetTypeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePetType not implemented")
}
func (UnimplementedPetClinicRestServiceServer) UpdatePetType(context.Context, *UpdatePetTypeRequest) (*UpdatePetTypeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePetType not implemented")
}
func (UnimplementedPetClinicRestServiceServer) DeletePetType(context.Context, *DeletePetTypeRequest) (*DeletePetTypeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePetType not implemented")
}
func (UnimplementedPetClinicRestServiceServer) GetPetType(context.Context, *GetPetTypeRequest) (*GetPetTypeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPetType not implemented")
}
func (UnimplementedPetClinicRestServiceServer) ListPetType(context.Context, *ListPetTypeRequest) (*ListPetTypeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPetType not implemented")
}
func (UnimplementedPetClinicRestServiceServer) CreateVisit(context.Context, *CreateVisitRequest) (*CreateVisitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVisit not implemented")
}
func (UnimplementedPetClinicRestServiceServer) UpdateVisit(context.Context, *UpdateVisitRequest) (*UpdateVisitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVisit not implemented")
}
func (UnimplementedPetClinicRestServiceServer) DeleteVisit(context.Context, *DeleteVisitRequest) (*DeleteVisitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVisit not implemented")
}
func (UnimplementedPetClinicRestServiceServer) GetVisit(context.Context, *GetVisitRequest) (*GetVisitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVisit not implemented")
}
func (UnimplementedPetClinicRestServiceServer) ListVisit(context.Context, *ListVisitRequest) (*ListVisitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVisit not implemented")
}
func (UnimplementedPetClinicRestServiceServer) CreatePet(context.Context, *CreatePetRequest) (*CreatePetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePet not implemented")
}
func (UnimplementedPetClinicRestServiceServer) UpdatePet(context.Context, *UpdatePetRequest) (*UpdatePetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePet not implemented")
}
func (UnimplementedPetClinicRestServiceServer) DeletePet(context.Context, *DeletePetRequest) (*DeletePetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePet not implemented")
}
func (UnimplementedPetClinicRestServiceServer) GetPet(context.Context, *GetPetRequest) (*GetPetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPet not implemented")
}
func (UnimplementedPetClinicRestServiceServer) ListPet(context.Context, *ListPetRequest) (*ListPetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPet not implemented")
}
func (UnimplementedPetClinicRestServiceServer) CreateOwnerPet(context.Context, *CreateOwnerPetRequest) (*CreateOwnerPetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOwnerPet not implemented")
}
func (UnimplementedPetClinicRestServiceServer) DeleteOwnerPet(context.Context, *DeleteOwnerPetRequest) (*DeleteOwnerPetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOwnerPet not implemented")
}
func (UnimplementedPetClinicRestServiceServer) GetOwnerPet(context.Context, *GetOwnerPetRequest) (*GetOwnerPetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOwnerPet not implemented")
}
func (UnimplementedPetClinicRestServiceServer) mustEmbedUnimplementedPetClinicRestServiceServer() {}

// UnsafePetClinicRestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PetClinicRestServiceServer will
// result in compilation errors.
type UnsafePetClinicRestServiceServer interface {
	mustEmbedUnimplementedPetClinicRestServiceServer()
}

func RegisterPetClinicRestServiceServer(s grpc.ServiceRegistrar, srv PetClinicRestServiceServer) {
	s.RegisterService(&PetClinicRestService_ServiceDesc, srv)
}

func _PetClinicRestService_CreateOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetClinicRestServiceServer).CreateOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetClinicRestService_CreateOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetClinicRestServiceServer).CreateOwner(ctx, req.(*CreateOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetClinicRestService_UpdateOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetClinicRestServiceServer).UpdateOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetClinicRestService_UpdateOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetClinicRestServiceServer).UpdateOwner(ctx, req.(*UpdateOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetClinicRestService_DeleteOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetClinicRestServiceServer).DeleteOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetClinicRestService_DeleteOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetClinicRestServiceServer).DeleteOwner(ctx, req.(*DeleteOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetClinicRestService_GetOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetClinicRestServiceServer).GetOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetClinicRestService_GetOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetClinicRestServiceServer).GetOwner(ctx, req.(*GetOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetClinicRestService_ListOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetClinicRestServiceServer).ListOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetClinicRestService_ListOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetClinicRestServiceServer).ListOwner(ctx, req.(*ListOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetClinicRestService_CreatePetType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePetTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetClinicRestServiceServer).CreatePetType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetClinicRestService_CreatePetType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetClinicRestServiceServer).CreatePetType(ctx, req.(*CreatePetTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetClinicRestService_UpdatePetType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePetTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetClinicRestServiceServer).UpdatePetType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetClinicRestService_UpdatePetType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetClinicRestServiceServer).UpdatePetType(ctx, req.(*UpdatePetTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetClinicRestService_DeletePetType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePetTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetClinicRestServiceServer).DeletePetType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetClinicRestService_DeletePetType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetClinicRestServiceServer).DeletePetType(ctx, req.(*DeletePetTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetClinicRestService_GetPetType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPetTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetClinicRestServiceServer).GetPetType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetClinicRestService_GetPetType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetClinicRestServiceServer).GetPetType(ctx, req.(*GetPetTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetClinicRestService_ListPetType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPetTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetClinicRestServiceServer).ListPetType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetClinicRestService_ListPetType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetClinicRestServiceServer).ListPetType(ctx, req.(*ListPetTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetClinicRestService_CreateVisit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVisitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetClinicRestServiceServer).CreateVisit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetClinicRestService_CreateVisit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetClinicRestServiceServer).CreateVisit(ctx, req.(*CreateVisitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetClinicRestService_UpdateVisit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVisitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetClinicRestServiceServer).UpdateVisit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetClinicRestService_UpdateVisit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetClinicRestServiceServer).UpdateVisit(ctx, req.(*UpdateVisitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetClinicRestService_DeleteVisit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVisitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetClinicRestServiceServer).DeleteVisit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetClinicRestService_DeleteVisit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetClinicRestServiceServer).DeleteVisit(ctx, req.(*DeleteVisitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetClinicRestService_GetVisit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVisitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetClinicRestServiceServer).GetVisit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetClinicRestService_GetVisit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetClinicRestServiceServer).GetVisit(ctx, req.(*GetVisitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetClinicRestService_ListVisit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVisitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetClinicRestServiceServer).ListVisit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetClinicRestService_ListVisit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetClinicRestServiceServer).ListVisit(ctx, req.(*ListVisitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetClinicRestService_CreatePet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetClinicRestServiceServer).CreatePet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetClinicRestService_CreatePet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetClinicRestServiceServer).CreatePet(ctx, req.(*CreatePetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetClinicRestService_UpdatePet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetClinicRestServiceServer).UpdatePet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetClinicRestService_UpdatePet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetClinicRestServiceServer).UpdatePet(ctx, req.(*UpdatePetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetClinicRestService_DeletePet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetClinicRestServiceServer).DeletePet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetClinicRestService_DeletePet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetClinicRestServiceServer).DeletePet(ctx, req.(*DeletePetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetClinicRestService_GetPet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetClinicRestServiceServer).GetPet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetClinicRestService_GetPet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetClinicRestServiceServer).GetPet(ctx, req.(*GetPetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetClinicRestService_ListPet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetClinicRestServiceServer).ListPet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetClinicRestService_ListPet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetClinicRestServiceServer).ListPet(ctx, req.(*ListPetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetClinicRestService_CreateOwnerPet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOwnerPetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetClinicRestServiceServer).CreateOwnerPet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetClinicRestService_CreateOwnerPet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetClinicRestServiceServer).CreateOwnerPet(ctx, req.(*CreateOwnerPetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetClinicRestService_DeleteOwnerPet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOwnerPetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetClinicRestServiceServer).DeleteOwnerPet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetClinicRestService_DeleteOwnerPet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetClinicRestServiceServer).DeleteOwnerPet(ctx, req.(*DeleteOwnerPetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetClinicRestService_GetOwnerPet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOwnerPetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetClinicRestServiceServer).GetOwnerPet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetClinicRestService_GetOwnerPet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetClinicRestServiceServer).GetOwnerPet(ctx, req.(*GetOwnerPetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PetClinicRestService_ServiceDesc is the grpc.ServiceDesc for PetClinicRestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PetClinicRestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.petclinic.PetClinicRestService",
	HandlerType: (*PetClinicRestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOwner",
			Handler:    _PetClinicRestService_CreateOwner_Handler,
		},
		{
			MethodName: "UpdateOwner",
			Handler:    _PetClinicRestService_UpdateOwner_Handler,
		},
		{
			MethodName: "DeleteOwner",
			Handler:    _PetClinicRestService_DeleteOwner_Handler,
		},
		{
			MethodName: "GetOwner",
			Handler:    _PetClinicRestService_GetOwner_Handler,
		},
		{
			MethodName: "ListOwner",
			Handler:    _PetClinicRestService_ListOwner_Handler,
		},
		{
			MethodName: "CreatePetType",
			Handler:    _PetClinicRestService_CreatePetType_Handler,
		},
		{
			MethodName: "UpdatePetType",
			Handler:    _PetClinicRestService_UpdatePetType_Handler,
		},
		{
			MethodName: "DeletePetType",
			Handler:    _PetClinicRestService_DeletePetType_Handler,
		},
		{
			MethodName: "GetPetType",
			Handler:    _PetClinicRestService_GetPetType_Handler,
		},
		{
			MethodName: "ListPetType",
			Handler:    _PetClinicRestService_ListPetType_Handler,
		},
		{
			MethodName: "CreateVisit",
			Handler:    _PetClinicRestService_CreateVisit_Handler,
		},
		{
			MethodName: "UpdateVisit",
			Handler:    _PetClinicRestService_UpdateVisit_Handler,
		},
		{
			MethodName: "DeleteVisit",
			Handler:    _PetClinicRestService_DeleteVisit_Handler,
		},
		{
			MethodName: "GetVisit",
			Handler:    _PetClinicRestService_GetVisit_Handler,
		},
		{
			MethodName: "ListVisit",
			Handler:    _PetClinicRestService_ListVisit_Handler,
		},
		{
			MethodName: "CreatePet",
			Handler:    _PetClinicRestService_CreatePet_Handler,
		},
		{
			MethodName: "UpdatePet",
			Handler:    _PetClinicRestService_UpdatePet_Handler,
		},
		{
			MethodName: "DeletePet",
			Handler:    _PetClinicRestService_DeletePet_Handler,
		},
		{
			MethodName: "GetPet",
			Handler:    _PetClinicRestService_GetPet_Handler,
		},
		{
			MethodName: "ListPet",
			Handler:    _PetClinicRestService_ListPet_Handler,
		},
		{
			MethodName: "CreateOwnerPet",
			Handler:    _PetClinicRestService_CreateOwnerPet_Handler,
		},
		{
			MethodName: "DeleteOwnerPet",
			Handler:    _PetClinicRestService_DeleteOwnerPet_Handler,
		},
		{
			MethodName: "GetOwnerPet",
			Handler:    _PetClinicRestService_GetOwnerPet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "petclinic/petclinic_rest_server.proto",
}
