// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.24.3
// source: petclinic/petclinic_rest_server.proto

package petclinic

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPetClinicRestServiceCreateOwner = "/api.petclinic.PetClinicRestService/CreateOwner"
const OperationPetClinicRestServiceCreateOwnerPet = "/api.petclinic.PetClinicRestService/CreateOwnerPet"
const OperationPetClinicRestServiceCreatePet = "/api.petclinic.PetClinicRestService/CreatePet"
const OperationPetClinicRestServiceCreatePetType = "/api.petclinic.PetClinicRestService/CreatePetType"
const OperationPetClinicRestServiceCreateVisit = "/api.petclinic.PetClinicRestService/CreateVisit"
const OperationPetClinicRestServiceDeleteOwner = "/api.petclinic.PetClinicRestService/DeleteOwner"
const OperationPetClinicRestServiceDeleteOwnerPet = "/api.petclinic.PetClinicRestService/DeleteOwnerPet"
const OperationPetClinicRestServiceDeletePet = "/api.petclinic.PetClinicRestService/DeletePet"
const OperationPetClinicRestServiceDeletePetType = "/api.petclinic.PetClinicRestService/DeletePetType"
const OperationPetClinicRestServiceDeleteVisit = "/api.petclinic.PetClinicRestService/DeleteVisit"
const OperationPetClinicRestServiceGetOwner = "/api.petclinic.PetClinicRestService/GetOwner"
const OperationPetClinicRestServiceGetOwnerPet = "/api.petclinic.PetClinicRestService/GetOwnerPet"
const OperationPetClinicRestServiceGetPet = "/api.petclinic.PetClinicRestService/GetPet"
const OperationPetClinicRestServiceGetPetType = "/api.petclinic.PetClinicRestService/GetPetType"
const OperationPetClinicRestServiceGetVisit = "/api.petclinic.PetClinicRestService/GetVisit"
const OperationPetClinicRestServiceListOwner = "/api.petclinic.PetClinicRestService/ListOwner"
const OperationPetClinicRestServiceListPet = "/api.petclinic.PetClinicRestService/ListPet"
const OperationPetClinicRestServiceListPetType = "/api.petclinic.PetClinicRestService/ListPetType"
const OperationPetClinicRestServiceListVisit = "/api.petclinic.PetClinicRestService/ListVisit"
const OperationPetClinicRestServiceUpdateOwner = "/api.petclinic.PetClinicRestService/UpdateOwner"
const OperationPetClinicRestServiceUpdatePet = "/api.petclinic.PetClinicRestService/UpdatePet"
const OperationPetClinicRestServiceUpdatePetType = "/api.petclinic.PetClinicRestService/UpdatePetType"
const OperationPetClinicRestServiceUpdateVisit = "/api.petclinic.PetClinicRestService/UpdateVisit"

type PetClinicRestServiceHTTPServer interface {
	// CreateOwner =========================== owner start =======================================
	CreateOwner(context.Context, *CreateOwnerRequest) (*CreateOwnerReply, error)
	CreateOwnerPet(context.Context, *CreateOwnerPetRequest) (*CreateOwnerPetReply, error)
	// CreatePet =========================== pet start =======================================
	CreatePet(context.Context, *CreatePetRequest) (*CreatePetReply, error)
	// CreatePetType =========================== pet type start =======================================
	CreatePetType(context.Context, *CreatePetTypeRequest) (*CreatePetTypeReply, error)
	// CreateVisit =========================== visit start =======================================
	CreateVisit(context.Context, *CreateVisitRequest) (*CreateVisitReply, error)
	DeleteOwner(context.Context, *DeleteOwnerRequest) (*DeleteOwnerReply, error)
	DeleteOwnerPet(context.Context, *DeleteOwnerPetRequest) (*DeleteOwnerPetReply, error)
	DeletePet(context.Context, *DeletePetRequest) (*DeletePetReply, error)
	DeletePetType(context.Context, *DeletePetTypeRequest) (*DeletePetTypeReply, error)
	DeleteVisit(context.Context, *DeleteVisitRequest) (*DeleteVisitReply, error)
	GetOwner(context.Context, *GetOwnerRequest) (*GetOwnerReply, error)
	GetOwnerPet(context.Context, *GetOwnerPetRequest) (*GetOwnerPetReply, error)
	GetPet(context.Context, *GetPetRequest) (*GetPetReply, error)
	GetPetType(context.Context, *GetPetTypeRequest) (*GetPetTypeReply, error)
	GetVisit(context.Context, *GetVisitRequest) (*GetVisitReply, error)
	ListOwner(context.Context, *ListOwnerRequest) (*ListOwnerReply, error)
	ListPet(context.Context, *ListPetRequest) (*ListPetReply, error)
	ListPetType(context.Context, *ListPetTypeRequest) (*ListPetTypeReply, error)
	ListVisit(context.Context, *ListVisitRequest) (*ListVisitReply, error)
	UpdateOwner(context.Context, *UpdateOwnerRequest) (*UpdateOwnerReply, error)
	UpdatePet(context.Context, *UpdatePetRequest) (*UpdatePetReply, error)
	UpdatePetType(context.Context, *UpdatePetTypeRequest) (*UpdatePetTypeReply, error)
	UpdateVisit(context.Context, *UpdateVisitRequest) (*UpdateVisitReply, error)
}

func RegisterPetClinicRestServiceHTTPServer(s *http.Server, srv PetClinicRestServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/petclinic/owner", _PetClinicRestService_CreateOwner0_HTTP_Handler(srv))
	r.PUT("/petclinic/owner/{id}", _PetClinicRestService_UpdateOwner0_HTTP_Handler(srv))
	r.DELETE("/petclinic/owner/{id}", _PetClinicRestService_DeleteOwner0_HTTP_Handler(srv))
	r.GET("/petclinic/owner/{id}", _PetClinicRestService_GetOwner0_HTTP_Handler(srv))
	r.GET("/petclinic/owners", _PetClinicRestService_ListOwner0_HTTP_Handler(srv))
	r.POST("/petclinic/pet_type", _PetClinicRestService_CreatePetType0_HTTP_Handler(srv))
	r.PUT("/petclinic/pet_type/{id}", _PetClinicRestService_UpdatePetType0_HTTP_Handler(srv))
	r.DELETE("/petclinic/pet_type/{id}", _PetClinicRestService_DeletePetType0_HTTP_Handler(srv))
	r.GET("/petclinic/pet_type/{id}", _PetClinicRestService_GetPetType0_HTTP_Handler(srv))
	r.GET("/petclinic/pet_types", _PetClinicRestService_ListPetType0_HTTP_Handler(srv))
	r.POST("/petclinic/visit", _PetClinicRestService_CreateVisit0_HTTP_Handler(srv))
	r.PUT("/petclinic/visit/{id}", _PetClinicRestService_UpdateVisit0_HTTP_Handler(srv))
	r.DELETE("/petclinic/visit/{id}", _PetClinicRestService_DeleteVisit0_HTTP_Handler(srv))
	r.GET("/petclinic/visit/{id}", _PetClinicRestService_GetVisit0_HTTP_Handler(srv))
	r.GET("/petclinic/visits", _PetClinicRestService_ListVisit0_HTTP_Handler(srv))
	r.POST("/petclinic/pet", _PetClinicRestService_CreatePet0_HTTP_Handler(srv))
	r.PUT("/petclinic/pet/{id}", _PetClinicRestService_UpdatePet0_HTTP_Handler(srv))
	r.DELETE("/petclinic/pet/{id}", _PetClinicRestService_DeletePet0_HTTP_Handler(srv))
	r.GET("/petclinic/pet/{id}", _PetClinicRestService_GetPet0_HTTP_Handler(srv))
	r.GET("/petclinic/pets", _PetClinicRestService_ListPet0_HTTP_Handler(srv))
	r.POST("/petclinic/owner/{owner_id}/pet", _PetClinicRestService_CreateOwnerPet0_HTTP_Handler(srv))
	r.DELETE("/petclinic/owner/{owner_id}/pet", _PetClinicRestService_DeleteOwnerPet0_HTTP_Handler(srv))
	r.GET("/petclinic/owner/{owner_id}/pets", _PetClinicRestService_GetOwnerPet0_HTTP_Handler(srv))
}

func _PetClinicRestService_CreateOwner0_HTTP_Handler(srv PetClinicRestServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateOwnerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPetClinicRestServiceCreateOwner)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateOwner(ctx, req.(*CreateOwnerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateOwnerReply)
		return ctx.Result(200, reply)
	}
}

func _PetClinicRestService_UpdateOwner0_HTTP_Handler(srv PetClinicRestServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateOwnerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPetClinicRestServiceUpdateOwner)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateOwner(ctx, req.(*UpdateOwnerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateOwnerReply)
		return ctx.Result(200, reply)
	}
}

func _PetClinicRestService_DeleteOwner0_HTTP_Handler(srv PetClinicRestServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteOwnerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPetClinicRestServiceDeleteOwner)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteOwner(ctx, req.(*DeleteOwnerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteOwnerReply)
		return ctx.Result(200, reply)
	}
}

func _PetClinicRestService_GetOwner0_HTTP_Handler(srv PetClinicRestServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetOwnerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPetClinicRestServiceGetOwner)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetOwner(ctx, req.(*GetOwnerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetOwnerReply)
		return ctx.Result(200, reply)
	}
}

func _PetClinicRestService_ListOwner0_HTTP_Handler(srv PetClinicRestServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListOwnerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPetClinicRestServiceListOwner)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListOwner(ctx, req.(*ListOwnerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListOwnerReply)
		return ctx.Result(200, reply)
	}
}

func _PetClinicRestService_CreatePetType0_HTTP_Handler(srv PetClinicRestServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreatePetTypeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPetClinicRestServiceCreatePetType)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreatePetType(ctx, req.(*CreatePetTypeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreatePetTypeReply)
		return ctx.Result(200, reply)
	}
}

func _PetClinicRestService_UpdatePetType0_HTTP_Handler(srv PetClinicRestServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdatePetTypeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPetClinicRestServiceUpdatePetType)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdatePetType(ctx, req.(*UpdatePetTypeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdatePetTypeReply)
		return ctx.Result(200, reply)
	}
}

func _PetClinicRestService_DeletePetType0_HTTP_Handler(srv PetClinicRestServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeletePetTypeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPetClinicRestServiceDeletePetType)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeletePetType(ctx, req.(*DeletePetTypeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeletePetTypeReply)
		return ctx.Result(200, reply)
	}
}

func _PetClinicRestService_GetPetType0_HTTP_Handler(srv PetClinicRestServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPetTypeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPetClinicRestServiceGetPetType)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPetType(ctx, req.(*GetPetTypeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPetTypeReply)
		return ctx.Result(200, reply)
	}
}

func _PetClinicRestService_ListPetType0_HTTP_Handler(srv PetClinicRestServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListPetTypeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPetClinicRestServiceListPetType)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListPetType(ctx, req.(*ListPetTypeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListPetTypeReply)
		return ctx.Result(200, reply)
	}
}

func _PetClinicRestService_CreateVisit0_HTTP_Handler(srv PetClinicRestServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateVisitRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPetClinicRestServiceCreateVisit)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateVisit(ctx, req.(*CreateVisitRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateVisitReply)
		return ctx.Result(200, reply)
	}
}

func _PetClinicRestService_UpdateVisit0_HTTP_Handler(srv PetClinicRestServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateVisitRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPetClinicRestServiceUpdateVisit)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateVisit(ctx, req.(*UpdateVisitRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateVisitReply)
		return ctx.Result(200, reply)
	}
}

func _PetClinicRestService_DeleteVisit0_HTTP_Handler(srv PetClinicRestServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteVisitRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPetClinicRestServiceDeleteVisit)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteVisit(ctx, req.(*DeleteVisitRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteVisitReply)
		return ctx.Result(200, reply)
	}
}

func _PetClinicRestService_GetVisit0_HTTP_Handler(srv PetClinicRestServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetVisitRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPetClinicRestServiceGetVisit)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetVisit(ctx, req.(*GetVisitRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetVisitReply)
		return ctx.Result(200, reply)
	}
}

func _PetClinicRestService_ListVisit0_HTTP_Handler(srv PetClinicRestServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListVisitRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPetClinicRestServiceListVisit)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListVisit(ctx, req.(*ListVisitRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListVisitReply)
		return ctx.Result(200, reply)
	}
}

func _PetClinicRestService_CreatePet0_HTTP_Handler(srv PetClinicRestServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreatePetRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPetClinicRestServiceCreatePet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreatePet(ctx, req.(*CreatePetRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreatePetReply)
		return ctx.Result(200, reply)
	}
}

func _PetClinicRestService_UpdatePet0_HTTP_Handler(srv PetClinicRestServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdatePetRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPetClinicRestServiceUpdatePet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdatePet(ctx, req.(*UpdatePetRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdatePetReply)
		return ctx.Result(200, reply)
	}
}

func _PetClinicRestService_DeletePet0_HTTP_Handler(srv PetClinicRestServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeletePetRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPetClinicRestServiceDeletePet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeletePet(ctx, req.(*DeletePetRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeletePetReply)
		return ctx.Result(200, reply)
	}
}

func _PetClinicRestService_GetPet0_HTTP_Handler(srv PetClinicRestServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPetRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPetClinicRestServiceGetPet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPet(ctx, req.(*GetPetRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPetReply)
		return ctx.Result(200, reply)
	}
}

func _PetClinicRestService_ListPet0_HTTP_Handler(srv PetClinicRestServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListPetRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPetClinicRestServiceListPet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListPet(ctx, req.(*ListPetRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListPetReply)
		return ctx.Result(200, reply)
	}
}

func _PetClinicRestService_CreateOwnerPet0_HTTP_Handler(srv PetClinicRestServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateOwnerPetRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPetClinicRestServiceCreateOwnerPet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateOwnerPet(ctx, req.(*CreateOwnerPetRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateOwnerPetReply)
		return ctx.Result(200, reply)
	}
}

func _PetClinicRestService_DeleteOwnerPet0_HTTP_Handler(srv PetClinicRestServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteOwnerPetRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPetClinicRestServiceDeleteOwnerPet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteOwnerPet(ctx, req.(*DeleteOwnerPetRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteOwnerPetReply)
		return ctx.Result(200, reply)
	}
}

func _PetClinicRestService_GetOwnerPet0_HTTP_Handler(srv PetClinicRestServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetOwnerPetRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPetClinicRestServiceGetOwnerPet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetOwnerPet(ctx, req.(*GetOwnerPetRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetOwnerPetReply)
		return ctx.Result(200, reply)
	}
}

type PetClinicRestServiceHTTPClient interface {
	CreateOwner(ctx context.Context, req *CreateOwnerRequest, opts ...http.CallOption) (rsp *CreateOwnerReply, err error)
	CreateOwnerPet(ctx context.Context, req *CreateOwnerPetRequest, opts ...http.CallOption) (rsp *CreateOwnerPetReply, err error)
	CreatePet(ctx context.Context, req *CreatePetRequest, opts ...http.CallOption) (rsp *CreatePetReply, err error)
	CreatePetType(ctx context.Context, req *CreatePetTypeRequest, opts ...http.CallOption) (rsp *CreatePetTypeReply, err error)
	CreateVisit(ctx context.Context, req *CreateVisitRequest, opts ...http.CallOption) (rsp *CreateVisitReply, err error)
	DeleteOwner(ctx context.Context, req *DeleteOwnerRequest, opts ...http.CallOption) (rsp *DeleteOwnerReply, err error)
	DeleteOwnerPet(ctx context.Context, req *DeleteOwnerPetRequest, opts ...http.CallOption) (rsp *DeleteOwnerPetReply, err error)
	DeletePet(ctx context.Context, req *DeletePetRequest, opts ...http.CallOption) (rsp *DeletePetReply, err error)
	DeletePetType(ctx context.Context, req *DeletePetTypeRequest, opts ...http.CallOption) (rsp *DeletePetTypeReply, err error)
	DeleteVisit(ctx context.Context, req *DeleteVisitRequest, opts ...http.CallOption) (rsp *DeleteVisitReply, err error)
	GetOwner(ctx context.Context, req *GetOwnerRequest, opts ...http.CallOption) (rsp *GetOwnerReply, err error)
	GetOwnerPet(ctx context.Context, req *GetOwnerPetRequest, opts ...http.CallOption) (rsp *GetOwnerPetReply, err error)
	GetPet(ctx context.Context, req *GetPetRequest, opts ...http.CallOption) (rsp *GetPetReply, err error)
	GetPetType(ctx context.Context, req *GetPetTypeRequest, opts ...http.CallOption) (rsp *GetPetTypeReply, err error)
	GetVisit(ctx context.Context, req *GetVisitRequest, opts ...http.CallOption) (rsp *GetVisitReply, err error)
	ListOwner(ctx context.Context, req *ListOwnerRequest, opts ...http.CallOption) (rsp *ListOwnerReply, err error)
	ListPet(ctx context.Context, req *ListPetRequest, opts ...http.CallOption) (rsp *ListPetReply, err error)
	ListPetType(ctx context.Context, req *ListPetTypeRequest, opts ...http.CallOption) (rsp *ListPetTypeReply, err error)
	ListVisit(ctx context.Context, req *ListVisitRequest, opts ...http.CallOption) (rsp *ListVisitReply, err error)
	UpdateOwner(ctx context.Context, req *UpdateOwnerRequest, opts ...http.CallOption) (rsp *UpdateOwnerReply, err error)
	UpdatePet(ctx context.Context, req *UpdatePetRequest, opts ...http.CallOption) (rsp *UpdatePetReply, err error)
	UpdatePetType(ctx context.Context, req *UpdatePetTypeRequest, opts ...http.CallOption) (rsp *UpdatePetTypeReply, err error)
	UpdateVisit(ctx context.Context, req *UpdateVisitRequest, opts ...http.CallOption) (rsp *UpdateVisitReply, err error)
}

type PetClinicRestServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewPetClinicRestServiceHTTPClient(client *http.Client) PetClinicRestServiceHTTPClient {
	return &PetClinicRestServiceHTTPClientImpl{client}
}

func (c *PetClinicRestServiceHTTPClientImpl) CreateOwner(ctx context.Context, in *CreateOwnerRequest, opts ...http.CallOption) (*CreateOwnerReply, error) {
	var out CreateOwnerReply
	pattern := "/petclinic/owner"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPetClinicRestServiceCreateOwner))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PetClinicRestServiceHTTPClientImpl) CreateOwnerPet(ctx context.Context, in *CreateOwnerPetRequest, opts ...http.CallOption) (*CreateOwnerPetReply, error) {
	var out CreateOwnerPetReply
	pattern := "/petclinic/owner/{owner_id}/pet"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPetClinicRestServiceCreateOwnerPet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PetClinicRestServiceHTTPClientImpl) CreatePet(ctx context.Context, in *CreatePetRequest, opts ...http.CallOption) (*CreatePetReply, error) {
	var out CreatePetReply
	pattern := "/petclinic/pet"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPetClinicRestServiceCreatePet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PetClinicRestServiceHTTPClientImpl) CreatePetType(ctx context.Context, in *CreatePetTypeRequest, opts ...http.CallOption) (*CreatePetTypeReply, error) {
	var out CreatePetTypeReply
	pattern := "/petclinic/pet_type"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPetClinicRestServiceCreatePetType))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PetClinicRestServiceHTTPClientImpl) CreateVisit(ctx context.Context, in *CreateVisitRequest, opts ...http.CallOption) (*CreateVisitReply, error) {
	var out CreateVisitReply
	pattern := "/petclinic/visit"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPetClinicRestServiceCreateVisit))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PetClinicRestServiceHTTPClientImpl) DeleteOwner(ctx context.Context, in *DeleteOwnerRequest, opts ...http.CallOption) (*DeleteOwnerReply, error) {
	var out DeleteOwnerReply
	pattern := "/petclinic/owner/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPetClinicRestServiceDeleteOwner))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PetClinicRestServiceHTTPClientImpl) DeleteOwnerPet(ctx context.Context, in *DeleteOwnerPetRequest, opts ...http.CallOption) (*DeleteOwnerPetReply, error) {
	var out DeleteOwnerPetReply
	pattern := "/petclinic/owner/{owner_id}/pet"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPetClinicRestServiceDeleteOwnerPet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PetClinicRestServiceHTTPClientImpl) DeletePet(ctx context.Context, in *DeletePetRequest, opts ...http.CallOption) (*DeletePetReply, error) {
	var out DeletePetReply
	pattern := "/petclinic/pet/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPetClinicRestServiceDeletePet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PetClinicRestServiceHTTPClientImpl) DeletePetType(ctx context.Context, in *DeletePetTypeRequest, opts ...http.CallOption) (*DeletePetTypeReply, error) {
	var out DeletePetTypeReply
	pattern := "/petclinic/pet_type/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPetClinicRestServiceDeletePetType))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PetClinicRestServiceHTTPClientImpl) DeleteVisit(ctx context.Context, in *DeleteVisitRequest, opts ...http.CallOption) (*DeleteVisitReply, error) {
	var out DeleteVisitReply
	pattern := "/petclinic/visit/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPetClinicRestServiceDeleteVisit))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PetClinicRestServiceHTTPClientImpl) GetOwner(ctx context.Context, in *GetOwnerRequest, opts ...http.CallOption) (*GetOwnerReply, error) {
	var out GetOwnerReply
	pattern := "/petclinic/owner/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPetClinicRestServiceGetOwner))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PetClinicRestServiceHTTPClientImpl) GetOwnerPet(ctx context.Context, in *GetOwnerPetRequest, opts ...http.CallOption) (*GetOwnerPetReply, error) {
	var out GetOwnerPetReply
	pattern := "/petclinic/owner/{owner_id}/pets"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPetClinicRestServiceGetOwnerPet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PetClinicRestServiceHTTPClientImpl) GetPet(ctx context.Context, in *GetPetRequest, opts ...http.CallOption) (*GetPetReply, error) {
	var out GetPetReply
	pattern := "/petclinic/pet/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPetClinicRestServiceGetPet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PetClinicRestServiceHTTPClientImpl) GetPetType(ctx context.Context, in *GetPetTypeRequest, opts ...http.CallOption) (*GetPetTypeReply, error) {
	var out GetPetTypeReply
	pattern := "/petclinic/pet_type/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPetClinicRestServiceGetPetType))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PetClinicRestServiceHTTPClientImpl) GetVisit(ctx context.Context, in *GetVisitRequest, opts ...http.CallOption) (*GetVisitReply, error) {
	var out GetVisitReply
	pattern := "/petclinic/visit/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPetClinicRestServiceGetVisit))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PetClinicRestServiceHTTPClientImpl) ListOwner(ctx context.Context, in *ListOwnerRequest, opts ...http.CallOption) (*ListOwnerReply, error) {
	var out ListOwnerReply
	pattern := "/petclinic/owners"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPetClinicRestServiceListOwner))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PetClinicRestServiceHTTPClientImpl) ListPet(ctx context.Context, in *ListPetRequest, opts ...http.CallOption) (*ListPetReply, error) {
	var out ListPetReply
	pattern := "/petclinic/pets"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPetClinicRestServiceListPet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PetClinicRestServiceHTTPClientImpl) ListPetType(ctx context.Context, in *ListPetTypeRequest, opts ...http.CallOption) (*ListPetTypeReply, error) {
	var out ListPetTypeReply
	pattern := "/petclinic/pet_types"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPetClinicRestServiceListPetType))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PetClinicRestServiceHTTPClientImpl) ListVisit(ctx context.Context, in *ListVisitRequest, opts ...http.CallOption) (*ListVisitReply, error) {
	var out ListVisitReply
	pattern := "/petclinic/visits"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPetClinicRestServiceListVisit))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PetClinicRestServiceHTTPClientImpl) UpdateOwner(ctx context.Context, in *UpdateOwnerRequest, opts ...http.CallOption) (*UpdateOwnerReply, error) {
	var out UpdateOwnerReply
	pattern := "/petclinic/owner/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPetClinicRestServiceUpdateOwner))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PetClinicRestServiceHTTPClientImpl) UpdatePet(ctx context.Context, in *UpdatePetRequest, opts ...http.CallOption) (*UpdatePetReply, error) {
	var out UpdatePetReply
	pattern := "/petclinic/pet/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPetClinicRestServiceUpdatePet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PetClinicRestServiceHTTPClientImpl) UpdatePetType(ctx context.Context, in *UpdatePetTypeRequest, opts ...http.CallOption) (*UpdatePetTypeReply, error) {
	var out UpdatePetTypeReply
	pattern := "/petclinic/pet_type/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPetClinicRestServiceUpdatePetType))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PetClinicRestServiceHTTPClientImpl) UpdateVisit(ctx context.Context, in *UpdateVisitRequest, opts ...http.CallOption) (*UpdateVisitReply, error) {
	var out UpdateVisitReply
	pattern := "/petclinic/visit/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPetClinicRestServiceUpdateVisit))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
