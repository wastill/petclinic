// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: petclinic/speciality.proto

package petclinic

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Speciality_CreateSpeciality_FullMethodName = "/api.petclinic.Speciality/CreateSpeciality"
	Speciality_UpdateSpeciality_FullMethodName = "/api.petclinic.Speciality/UpdateSpeciality"
	Speciality_DeleteSpeciality_FullMethodName = "/api.petclinic.Speciality/DeleteSpeciality"
	Speciality_GetSpeciality_FullMethodName    = "/api.petclinic.Speciality/GetSpeciality"
	Speciality_ListSpeciality_FullMethodName   = "/api.petclinic.Speciality/ListSpeciality"
)

// SpecialityClient is the client API for Speciality service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpecialityClient interface {
	CreateSpeciality(ctx context.Context, in *CreateSpecialityRequest, opts ...grpc.CallOption) (*CreateSpecialityReply, error)
	UpdateSpeciality(ctx context.Context, in *UpdateSpecialityRequest, opts ...grpc.CallOption) (*UpdateSpecialityReply, error)
	DeleteSpeciality(ctx context.Context, in *DeleteSpecialityRequest, opts ...grpc.CallOption) (*DeleteSpecialityReply, error)
	GetSpeciality(ctx context.Context, in *GetSpecialityRequest, opts ...grpc.CallOption) (*GetSpecialityReply, error)
	ListSpeciality(ctx context.Context, in *ListSpecialityRequest, opts ...grpc.CallOption) (*ListSpecialityReply, error)
}

type specialityClient struct {
	cc grpc.ClientConnInterface
}

func NewSpecialityClient(cc grpc.ClientConnInterface) SpecialityClient {
	return &specialityClient{cc}
}

func (c *specialityClient) CreateSpeciality(ctx context.Context, in *CreateSpecialityRequest, opts ...grpc.CallOption) (*CreateSpecialityReply, error) {
	out := new(CreateSpecialityReply)
	err := c.cc.Invoke(ctx, Speciality_CreateSpeciality_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specialityClient) UpdateSpeciality(ctx context.Context, in *UpdateSpecialityRequest, opts ...grpc.CallOption) (*UpdateSpecialityReply, error) {
	out := new(UpdateSpecialityReply)
	err := c.cc.Invoke(ctx, Speciality_UpdateSpeciality_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specialityClient) DeleteSpeciality(ctx context.Context, in *DeleteSpecialityRequest, opts ...grpc.CallOption) (*DeleteSpecialityReply, error) {
	out := new(DeleteSpecialityReply)
	err := c.cc.Invoke(ctx, Speciality_DeleteSpeciality_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specialityClient) GetSpeciality(ctx context.Context, in *GetSpecialityRequest, opts ...grpc.CallOption) (*GetSpecialityReply, error) {
	out := new(GetSpecialityReply)
	err := c.cc.Invoke(ctx, Speciality_GetSpeciality_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specialityClient) ListSpeciality(ctx context.Context, in *ListSpecialityRequest, opts ...grpc.CallOption) (*ListSpecialityReply, error) {
	out := new(ListSpecialityReply)
	err := c.cc.Invoke(ctx, Speciality_ListSpeciality_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpecialityServer is the server API for Speciality service.
// All implementations must embed UnimplementedSpecialityServer
// for forward compatibility
type SpecialityServer interface {
	CreateSpeciality(context.Context, *CreateSpecialityRequest) (*CreateSpecialityReply, error)
	UpdateSpeciality(context.Context, *UpdateSpecialityRequest) (*UpdateSpecialityReply, error)
	DeleteSpeciality(context.Context, *DeleteSpecialityRequest) (*DeleteSpecialityReply, error)
	GetSpeciality(context.Context, *GetSpecialityRequest) (*GetSpecialityReply, error)
	ListSpeciality(context.Context, *ListSpecialityRequest) (*ListSpecialityReply, error)
	mustEmbedUnimplementedSpecialityServer()
}

// UnimplementedSpecialityServer must be embedded to have forward compatible implementations.
type UnimplementedSpecialityServer struct {
}

func (UnimplementedSpecialityServer) CreateSpeciality(context.Context, *CreateSpecialityRequest) (*CreateSpecialityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpeciality not implemented")
}
func (UnimplementedSpecialityServer) UpdateSpeciality(context.Context, *UpdateSpecialityRequest) (*UpdateSpecialityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSpeciality not implemented")
}
func (UnimplementedSpecialityServer) DeleteSpeciality(context.Context, *DeleteSpecialityRequest) (*DeleteSpecialityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSpeciality not implemented")
}
func (UnimplementedSpecialityServer) GetSpeciality(context.Context, *GetSpecialityRequest) (*GetSpecialityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpeciality not implemented")
}
func (UnimplementedSpecialityServer) ListSpeciality(context.Context, *ListSpecialityRequest) (*ListSpecialityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSpeciality not implemented")
}
func (UnimplementedSpecialityServer) mustEmbedUnimplementedSpecialityServer() {}

// UnsafeSpecialityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpecialityServer will
// result in compilation errors.
type UnsafeSpecialityServer interface {
	mustEmbedUnimplementedSpecialityServer()
}

func RegisterSpecialityServer(s grpc.ServiceRegistrar, srv SpecialityServer) {
	s.RegisterService(&Speciality_ServiceDesc, srv)
}

func _Speciality_CreateSpeciality_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSpecialityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecialityServer).CreateSpeciality(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Speciality_CreateSpeciality_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecialityServer).CreateSpeciality(ctx, req.(*CreateSpecialityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Speciality_UpdateSpeciality_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSpecialityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecialityServer).UpdateSpeciality(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Speciality_UpdateSpeciality_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecialityServer).UpdateSpeciality(ctx, req.(*UpdateSpecialityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Speciality_DeleteSpeciality_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSpecialityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecialityServer).DeleteSpeciality(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Speciality_DeleteSpeciality_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecialityServer).DeleteSpeciality(ctx, req.(*DeleteSpecialityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Speciality_GetSpeciality_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpecialityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecialityServer).GetSpeciality(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Speciality_GetSpeciality_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecialityServer).GetSpeciality(ctx, req.(*GetSpecialityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Speciality_ListSpeciality_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSpecialityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecialityServer).ListSpeciality(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Speciality_ListSpeciality_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecialityServer).ListSpeciality(ctx, req.(*ListSpecialityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Speciality_ServiceDesc is the grpc.ServiceDesc for Speciality service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Speciality_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.petclinic.Speciality",
	HandlerType: (*SpecialityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSpeciality",
			Handler:    _Speciality_CreateSpeciality_Handler,
		},
		{
			MethodName: "UpdateSpeciality",
			Handler:    _Speciality_UpdateSpeciality_Handler,
		},
		{
			MethodName: "DeleteSpeciality",
			Handler:    _Speciality_DeleteSpeciality_Handler,
		},
		{
			MethodName: "GetSpeciality",
			Handler:    _Speciality_GetSpeciality_Handler,
		},
		{
			MethodName: "ListSpeciality",
			Handler:    _Speciality_ListSpeciality_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "petclinic/speciality.proto",
}
