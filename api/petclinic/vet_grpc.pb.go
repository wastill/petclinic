// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: petclinic/vet.proto

package petclinic

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Vet_CreateVet_FullMethodName = "/api.petclinic.Vet/CreateVet"
	Vet_UpdateVet_FullMethodName = "/api.petclinic.Vet/UpdateVet"
	Vet_DeleteVet_FullMethodName = "/api.petclinic.Vet/DeleteVet"
	Vet_GetVet_FullMethodName    = "/api.petclinic.Vet/GetVet"
	Vet_ListVet_FullMethodName   = "/api.petclinic.Vet/ListVet"
)

// VetClient is the client API for Vet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VetClient interface {
	CreateVet(ctx context.Context, in *CreateVetRequest, opts ...grpc.CallOption) (*CreateVetReply, error)
	UpdateVet(ctx context.Context, in *UpdateVetRequest, opts ...grpc.CallOption) (*UpdateVetReply, error)
	DeleteVet(ctx context.Context, in *DeleteVetRequest, opts ...grpc.CallOption) (*DeleteVetReply, error)
	GetVet(ctx context.Context, in *GetVetRequest, opts ...grpc.CallOption) (*GetVetReply, error)
	ListVet(ctx context.Context, in *ListVetRequest, opts ...grpc.CallOption) (*ListVetReply, error)
}

type vetClient struct {
	cc grpc.ClientConnInterface
}

func NewVetClient(cc grpc.ClientConnInterface) VetClient {
	return &vetClient{cc}
}

func (c *vetClient) CreateVet(ctx context.Context, in *CreateVetRequest, opts ...grpc.CallOption) (*CreateVetReply, error) {
	out := new(CreateVetReply)
	err := c.cc.Invoke(ctx, Vet_CreateVet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vetClient) UpdateVet(ctx context.Context, in *UpdateVetRequest, opts ...grpc.CallOption) (*UpdateVetReply, error) {
	out := new(UpdateVetReply)
	err := c.cc.Invoke(ctx, Vet_UpdateVet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vetClient) DeleteVet(ctx context.Context, in *DeleteVetRequest, opts ...grpc.CallOption) (*DeleteVetReply, error) {
	out := new(DeleteVetReply)
	err := c.cc.Invoke(ctx, Vet_DeleteVet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vetClient) GetVet(ctx context.Context, in *GetVetRequest, opts ...grpc.CallOption) (*GetVetReply, error) {
	out := new(GetVetReply)
	err := c.cc.Invoke(ctx, Vet_GetVet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vetClient) ListVet(ctx context.Context, in *ListVetRequest, opts ...grpc.CallOption) (*ListVetReply, error) {
	out := new(ListVetReply)
	err := c.cc.Invoke(ctx, Vet_ListVet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VetServer is the server API for Vet service.
// All implementations must embed UnimplementedVetServer
// for forward compatibility
type VetServer interface {
	CreateVet(context.Context, *CreateVetRequest) (*CreateVetReply, error)
	UpdateVet(context.Context, *UpdateVetRequest) (*UpdateVetReply, error)
	DeleteVet(context.Context, *DeleteVetRequest) (*DeleteVetReply, error)
	GetVet(context.Context, *GetVetRequest) (*GetVetReply, error)
	ListVet(context.Context, *ListVetRequest) (*ListVetReply, error)
	mustEmbedUnimplementedVetServer()
}

// UnimplementedVetServer must be embedded to have forward compatible implementations.
type UnimplementedVetServer struct {
}

func (UnimplementedVetServer) CreateVet(context.Context, *CreateVetRequest) (*CreateVetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVet not implemented")
}
func (UnimplementedVetServer) UpdateVet(context.Context, *UpdateVetRequest) (*UpdateVetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVet not implemented")
}
func (UnimplementedVetServer) DeleteVet(context.Context, *DeleteVetRequest) (*DeleteVetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVet not implemented")
}
func (UnimplementedVetServer) GetVet(context.Context, *GetVetRequest) (*GetVetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVet not implemented")
}
func (UnimplementedVetServer) ListVet(context.Context, *ListVetRequest) (*ListVetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVet not implemented")
}
func (UnimplementedVetServer) mustEmbedUnimplementedVetServer() {}

// UnsafeVetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VetServer will
// result in compilation errors.
type UnsafeVetServer interface {
	mustEmbedUnimplementedVetServer()
}

func RegisterVetServer(s grpc.ServiceRegistrar, srv VetServer) {
	s.RegisterService(&Vet_ServiceDesc, srv)
}

func _Vet_CreateVet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VetServer).CreateVet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vet_CreateVet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VetServer).CreateVet(ctx, req.(*CreateVetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vet_UpdateVet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VetServer).UpdateVet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vet_UpdateVet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VetServer).UpdateVet(ctx, req.(*UpdateVetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vet_DeleteVet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VetServer).DeleteVet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vet_DeleteVet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VetServer).DeleteVet(ctx, req.(*DeleteVetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vet_GetVet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VetServer).GetVet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vet_GetVet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VetServer).GetVet(ctx, req.(*GetVetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vet_ListVet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VetServer).ListVet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vet_ListVet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VetServer).ListVet(ctx, req.(*ListVetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Vet_ServiceDesc is the grpc.ServiceDesc for Vet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Vet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.petclinic.Vet",
	HandlerType: (*VetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVet",
			Handler:    _Vet_CreateVet_Handler,
		},
		{
			MethodName: "UpdateVet",
			Handler:    _Vet_UpdateVet_Handler,
		},
		{
			MethodName: "DeleteVet",
			Handler:    _Vet_DeleteVet_Handler,
		},
		{
			MethodName: "GetVet",
			Handler:    _Vet_GetVet_Handler,
		},
		{
			MethodName: "ListVet",
			Handler:    _Vet_ListVet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "petclinic/vet.proto",
}
