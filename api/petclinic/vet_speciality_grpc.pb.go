// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: petclinic/vet_speciality.proto

package petclinic

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	VetSpeciality_CreateVetSpeciality_FullMethodName = "/api.petclinic.VetSpeciality/CreateVetSpeciality"
	VetSpeciality_UpdateVetSpeciality_FullMethodName = "/api.petclinic.VetSpeciality/UpdateVetSpeciality"
	VetSpeciality_DeleteVetSpeciality_FullMethodName = "/api.petclinic.VetSpeciality/DeleteVetSpeciality"
	VetSpeciality_GetVetSpeciality_FullMethodName    = "/api.petclinic.VetSpeciality/GetVetSpeciality"
	VetSpeciality_ListVetSpeciality_FullMethodName   = "/api.petclinic.VetSpeciality/ListVetSpeciality"
)

// VetSpecialityClient is the client API for VetSpeciality service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VetSpecialityClient interface {
	CreateVetSpeciality(ctx context.Context, in *CreateVetSpecialityRequest, opts ...grpc.CallOption) (*CreateVetSpecialityReply, error)
	UpdateVetSpeciality(ctx context.Context, in *UpdateVetSpecialityRequest, opts ...grpc.CallOption) (*UpdateVetSpecialityReply, error)
	DeleteVetSpeciality(ctx context.Context, in *DeleteVetSpecialityRequest, opts ...grpc.CallOption) (*DeleteVetSpecialityReply, error)
	GetVetSpeciality(ctx context.Context, in *GetVetSpecialityRequest, opts ...grpc.CallOption) (*GetVetSpecialityReply, error)
	ListVetSpeciality(ctx context.Context, in *ListVetSpecialityRequest, opts ...grpc.CallOption) (*ListVetSpecialityReply, error)
}

type vetSpecialityClient struct {
	cc grpc.ClientConnInterface
}

func NewVetSpecialityClient(cc grpc.ClientConnInterface) VetSpecialityClient {
	return &vetSpecialityClient{cc}
}

func (c *vetSpecialityClient) CreateVetSpeciality(ctx context.Context, in *CreateVetSpecialityRequest, opts ...grpc.CallOption) (*CreateVetSpecialityReply, error) {
	out := new(CreateVetSpecialityReply)
	err := c.cc.Invoke(ctx, VetSpeciality_CreateVetSpeciality_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vetSpecialityClient) UpdateVetSpeciality(ctx context.Context, in *UpdateVetSpecialityRequest, opts ...grpc.CallOption) (*UpdateVetSpecialityReply, error) {
	out := new(UpdateVetSpecialityReply)
	err := c.cc.Invoke(ctx, VetSpeciality_UpdateVetSpeciality_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vetSpecialityClient) DeleteVetSpeciality(ctx context.Context, in *DeleteVetSpecialityRequest, opts ...grpc.CallOption) (*DeleteVetSpecialityReply, error) {
	out := new(DeleteVetSpecialityReply)
	err := c.cc.Invoke(ctx, VetSpeciality_DeleteVetSpeciality_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vetSpecialityClient) GetVetSpeciality(ctx context.Context, in *GetVetSpecialityRequest, opts ...grpc.CallOption) (*GetVetSpecialityReply, error) {
	out := new(GetVetSpecialityReply)
	err := c.cc.Invoke(ctx, VetSpeciality_GetVetSpeciality_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vetSpecialityClient) ListVetSpeciality(ctx context.Context, in *ListVetSpecialityRequest, opts ...grpc.CallOption) (*ListVetSpecialityReply, error) {
	out := new(ListVetSpecialityReply)
	err := c.cc.Invoke(ctx, VetSpeciality_ListVetSpeciality_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VetSpecialityServer is the server API for VetSpeciality service.
// All implementations must embed UnimplementedVetSpecialityServer
// for forward compatibility
type VetSpecialityServer interface {
	CreateVetSpeciality(context.Context, *CreateVetSpecialityRequest) (*CreateVetSpecialityReply, error)
	UpdateVetSpeciality(context.Context, *UpdateVetSpecialityRequest) (*UpdateVetSpecialityReply, error)
	DeleteVetSpeciality(context.Context, *DeleteVetSpecialityRequest) (*DeleteVetSpecialityReply, error)
	GetVetSpeciality(context.Context, *GetVetSpecialityRequest) (*GetVetSpecialityReply, error)
	ListVetSpeciality(context.Context, *ListVetSpecialityRequest) (*ListVetSpecialityReply, error)
	mustEmbedUnimplementedVetSpecialityServer()
}

// UnimplementedVetSpecialityServer must be embedded to have forward compatible implementations.
type UnimplementedVetSpecialityServer struct {
}

func (UnimplementedVetSpecialityServer) CreateVetSpeciality(context.Context, *CreateVetSpecialityRequest) (*CreateVetSpecialityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVetSpeciality not implemented")
}
func (UnimplementedVetSpecialityServer) UpdateVetSpeciality(context.Context, *UpdateVetSpecialityRequest) (*UpdateVetSpecialityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVetSpeciality not implemented")
}
func (UnimplementedVetSpecialityServer) DeleteVetSpeciality(context.Context, *DeleteVetSpecialityRequest) (*DeleteVetSpecialityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVetSpeciality not implemented")
}
func (UnimplementedVetSpecialityServer) GetVetSpeciality(context.Context, *GetVetSpecialityRequest) (*GetVetSpecialityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVetSpeciality not implemented")
}
func (UnimplementedVetSpecialityServer) ListVetSpeciality(context.Context, *ListVetSpecialityRequest) (*ListVetSpecialityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVetSpeciality not implemented")
}
func (UnimplementedVetSpecialityServer) mustEmbedUnimplementedVetSpecialityServer() {}

// UnsafeVetSpecialityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VetSpecialityServer will
// result in compilation errors.
type UnsafeVetSpecialityServer interface {
	mustEmbedUnimplementedVetSpecialityServer()
}

func RegisterVetSpecialityServer(s grpc.ServiceRegistrar, srv VetSpecialityServer) {
	s.RegisterService(&VetSpeciality_ServiceDesc, srv)
}

func _VetSpeciality_CreateVetSpeciality_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVetSpecialityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VetSpecialityServer).CreateVetSpeciality(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VetSpeciality_CreateVetSpeciality_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VetSpecialityServer).CreateVetSpeciality(ctx, req.(*CreateVetSpecialityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VetSpeciality_UpdateVetSpeciality_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVetSpecialityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VetSpecialityServer).UpdateVetSpeciality(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VetSpeciality_UpdateVetSpeciality_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VetSpecialityServer).UpdateVetSpeciality(ctx, req.(*UpdateVetSpecialityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VetSpeciality_DeleteVetSpeciality_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVetSpecialityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VetSpecialityServer).DeleteVetSpeciality(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VetSpeciality_DeleteVetSpeciality_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VetSpecialityServer).DeleteVetSpeciality(ctx, req.(*DeleteVetSpecialityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VetSpeciality_GetVetSpeciality_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVetSpecialityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VetSpecialityServer).GetVetSpeciality(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VetSpeciality_GetVetSpeciality_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VetSpecialityServer).GetVetSpeciality(ctx, req.(*GetVetSpecialityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VetSpeciality_ListVetSpeciality_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVetSpecialityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VetSpecialityServer).ListVetSpeciality(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VetSpeciality_ListVetSpeciality_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VetSpecialityServer).ListVetSpeciality(ctx, req.(*ListVetSpecialityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VetSpeciality_ServiceDesc is the grpc.ServiceDesc for VetSpeciality service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VetSpeciality_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.petclinic.VetSpeciality",
	HandlerType: (*VetSpecialityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVetSpeciality",
			Handler:    _VetSpeciality_CreateVetSpeciality_Handler,
		},
		{
			MethodName: "UpdateVetSpeciality",
			Handler:    _VetSpeciality_UpdateVetSpeciality_Handler,
		},
		{
			MethodName: "DeleteVetSpeciality",
			Handler:    _VetSpeciality_DeleteVetSpeciality_Handler,
		},
		{
			MethodName: "GetVetSpeciality",
			Handler:    _VetSpeciality_GetVetSpeciality_Handler,
		},
		{
			MethodName: "ListVetSpeciality",
			Handler:    _VetSpeciality_ListVetSpeciality_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "petclinic/vet_speciality.proto",
}
