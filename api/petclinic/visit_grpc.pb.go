// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: petclinic/visit.proto

package petclinic

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Visit_CreateVisit_FullMethodName = "/api.petclinic.Visit/CreateVisit"
	Visit_UpdateVisit_FullMethodName = "/api.petclinic.Visit/UpdateVisit"
	Visit_DeleteVisit_FullMethodName = "/api.petclinic.Visit/DeleteVisit"
	Visit_GetVisit_FullMethodName    = "/api.petclinic.Visit/GetVisit"
	Visit_ListVisit_FullMethodName   = "/api.petclinic.Visit/ListVisit"
)

// VisitClient is the client API for Visit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VisitClient interface {
	CreateVisit(ctx context.Context, in *CreateVisitRequest, opts ...grpc.CallOption) (*CreateVisitReply, error)
	UpdateVisit(ctx context.Context, in *UpdateVisitRequest, opts ...grpc.CallOption) (*UpdateVisitReply, error)
	DeleteVisit(ctx context.Context, in *DeleteVisitRequest, opts ...grpc.CallOption) (*DeleteVisitReply, error)
	GetVisit(ctx context.Context, in *GetVisitRequest, opts ...grpc.CallOption) (*GetVisitReply, error)
	ListVisit(ctx context.Context, in *ListVisitRequest, opts ...grpc.CallOption) (*ListVisitReply, error)
}

type visitClient struct {
	cc grpc.ClientConnInterface
}

func NewVisitClient(cc grpc.ClientConnInterface) VisitClient {
	return &visitClient{cc}
}

func (c *visitClient) CreateVisit(ctx context.Context, in *CreateVisitRequest, opts ...grpc.CallOption) (*CreateVisitReply, error) {
	out := new(CreateVisitReply)
	err := c.cc.Invoke(ctx, Visit_CreateVisit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitClient) UpdateVisit(ctx context.Context, in *UpdateVisitRequest, opts ...grpc.CallOption) (*UpdateVisitReply, error) {
	out := new(UpdateVisitReply)
	err := c.cc.Invoke(ctx, Visit_UpdateVisit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitClient) DeleteVisit(ctx context.Context, in *DeleteVisitRequest, opts ...grpc.CallOption) (*DeleteVisitReply, error) {
	out := new(DeleteVisitReply)
	err := c.cc.Invoke(ctx, Visit_DeleteVisit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitClient) GetVisit(ctx context.Context, in *GetVisitRequest, opts ...grpc.CallOption) (*GetVisitReply, error) {
	out := new(GetVisitReply)
	err := c.cc.Invoke(ctx, Visit_GetVisit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitClient) ListVisit(ctx context.Context, in *ListVisitRequest, opts ...grpc.CallOption) (*ListVisitReply, error) {
	out := new(ListVisitReply)
	err := c.cc.Invoke(ctx, Visit_ListVisit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VisitServer is the server API for Visit service.
// All implementations must embed UnimplementedVisitServer
// for forward compatibility
type VisitServer interface {
	CreateVisit(context.Context, *CreateVisitRequest) (*CreateVisitReply, error)
	UpdateVisit(context.Context, *UpdateVisitRequest) (*UpdateVisitReply, error)
	DeleteVisit(context.Context, *DeleteVisitRequest) (*DeleteVisitReply, error)
	GetVisit(context.Context, *GetVisitRequest) (*GetVisitReply, error)
	ListVisit(context.Context, *ListVisitRequest) (*ListVisitReply, error)
	mustEmbedUnimplementedVisitServer()
}

// UnimplementedVisitServer must be embedded to have forward compatible implementations.
type UnimplementedVisitServer struct {
}

func (UnimplementedVisitServer) CreateVisit(context.Context, *CreateVisitRequest) (*CreateVisitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVisit not implemented")
}
func (UnimplementedVisitServer) UpdateVisit(context.Context, *UpdateVisitRequest) (*UpdateVisitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVisit not implemented")
}
func (UnimplementedVisitServer) DeleteVisit(context.Context, *DeleteVisitRequest) (*DeleteVisitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVisit not implemented")
}
func (UnimplementedVisitServer) GetVisit(context.Context, *GetVisitRequest) (*GetVisitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVisit not implemented")
}
func (UnimplementedVisitServer) ListVisit(context.Context, *ListVisitRequest) (*ListVisitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVisit not implemented")
}
func (UnimplementedVisitServer) mustEmbedUnimplementedVisitServer() {}

// UnsafeVisitServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VisitServer will
// result in compilation errors.
type UnsafeVisitServer interface {
	mustEmbedUnimplementedVisitServer()
}

func RegisterVisitServer(s grpc.ServiceRegistrar, srv VisitServer) {
	s.RegisterService(&Visit_ServiceDesc, srv)
}

func _Visit_CreateVisit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVisitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisitServer).CreateVisit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Visit_CreateVisit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisitServer).CreateVisit(ctx, req.(*CreateVisitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Visit_UpdateVisit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVisitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisitServer).UpdateVisit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Visit_UpdateVisit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisitServer).UpdateVisit(ctx, req.(*UpdateVisitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Visit_DeleteVisit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVisitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisitServer).DeleteVisit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Visit_DeleteVisit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisitServer).DeleteVisit(ctx, req.(*DeleteVisitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Visit_GetVisit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVisitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisitServer).GetVisit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Visit_GetVisit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisitServer).GetVisit(ctx, req.(*GetVisitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Visit_ListVisit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVisitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisitServer).ListVisit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Visit_ListVisit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisitServer).ListVisit(ctx, req.(*ListVisitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Visit_ServiceDesc is the grpc.ServiceDesc for Visit service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Visit_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.petclinic.Visit",
	HandlerType: (*VisitServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVisit",
			Handler:    _Visit_CreateVisit_Handler,
		},
		{
			MethodName: "UpdateVisit",
			Handler:    _Visit_UpdateVisit_Handler,
		},
		{
			MethodName: "DeleteVisit",
			Handler:    _Visit_DeleteVisit_Handler,
		},
		{
			MethodName: "GetVisit",
			Handler:    _Visit_GetVisit_Handler,
		},
		{
			MethodName: "ListVisit",
			Handler:    _Visit_ListVisit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "petclinic/visit.proto",
}
