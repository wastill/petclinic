// Code generated by ent, DO NOT EDIT.

package role

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the role type in the database.
	Label = "role"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldRole holds the string denoting the role field in the database.
	FieldRole = "role"
	// EdgeBelongUser holds the string denoting the belong_user edge name in mutations.
	EdgeBelongUser = "belong_user"
	// Table holds the table name of the role in the database.
	Table = "roles"
	// BelongUserTable is the table that holds the belong_user relation/edge.
	BelongUserTable = "roles"
	// BelongUserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	BelongUserInverseTable = "users"
	// BelongUserColumn is the table column denoting the belong_user relation/edge.
	BelongUserColumn = "user_roles"
)

// Columns holds all SQL columns for role fields.
var Columns = []string{
	FieldID,
	FieldUsername,
	FieldRole,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "roles"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_roles",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Role queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByRole orders the results by the role field.
func ByRole(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRole, opts...).ToFunc()
}

// ByBelongUserField orders the results by belong_user field.
func ByBelongUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBelongUserStep(), sql.OrderByField(field, opts...))
	}
}
func newBelongUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BelongUserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BelongUserTable, BelongUserColumn),
	)
}
